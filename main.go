package main

import (
	"errors"
	"fmt"
	"github.com/fatih/color"
	"math"
)

var (
	red          = color.New(color.FgRed).SprintFunc()
	redBold      = color.New(color.FgRed, color.Bold).SprintFunc()
	success      = color.New(color.FgGreen).SprintFunc()
	green        = color.New(color.FgGreen, color.BgBlack).Add(color.BlinkSlow).SprintFunc()
	yellow       = color.New(color.FgYellow).SprintFunc()
	yellowBoldUl = color.New(color.FgYellow, color.Bold).Add(color.Underline).SprintFunc()
	fgCyan       = color.New(color.FgCyan, color.Bold).SprintFunc()
)

func main() {
	previewResult := preview()
	if previewResult != 1 {
		fmt.Println(yellowBoldUl("–°—á–µ—Ç—á–∏–∫ –∫–æ–ª–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤"))
	}
	for {
		_, err := calculateMass()
		if err != nil {
			continue
		}
		isRepeat := checkRepeat()
		if !isRepeat {
			break
		}
	}
}

func preview() uint8 {
	var startOutput uint8
	fmt.Println(yellowBoldUl("–≠—Ç–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤"))
	fmt.Println(green("–ù–∞–∂–º–∏—Ç–µ 1 –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞"))
	fmt.Println(green("–ù–∞–∂–º–∏—Ç–µ 2 –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –°—á–µ—Ç—á–∏–∫ –∫–æ–ª–æ—Ä–∏–π"))
	fmt.Scan(&startOutput)
	return startOutput
}

func checkRepeat() bool {
	var newCalculation string
	fmt.Println(yellow("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç –µ—â–µ —Ä–∞–∑?(yes/no)"))
	fmt.Scan(&newCalculation)
	return newCalculation == "yes" || newCalculation == "y"
}

func calculateMass() (bool, error) {
	height, weight := getUserOutput()
	if height <= 0 || weight <= 0 {
		fmt.Println(redBold("‚ùóÔ∏è–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞ –æ—à–∏–±–∫–∞ü§¨"))
		return false, errors.New("NO_CORRECT_INPUT")
	}
	imt := calculateIMT(height, weight)
	outputResult(imt)
	return true, nil
}

func outputResult(imt float64) {
	fmt.Println(printResultIMT(imt))
}

func calculateIMT(height, weight float64) float64 {
	const IMTPower = 2
	return weight / math.Pow(height/100, IMTPower)
}

func getUserOutput() (float64, float64) {
	var height float64
	var weight float64
	fmt.Println(fgCyan("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º—ã—Å—Å—ã —Ç–µ–ª–∞"))
	fmt.Println("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç:")

	fmt.Scan(&height)

	fmt.Println("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å:")

	fmt.Scan(&weight)

	return height, weight
}

func printResultIMT(imt float64) string {
	switch {
	case imt <= 16.0:
		return fmt.Sprintf(red("–£ –≤–∞—Å —Å–∏–ª—å–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞, –≤–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: %.2f"), imt)
	case imt >= 16.0 && imt <= 18.5:
		return fmt.Sprintf(yellow("–£ –≤–∞—Å –¥–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞, –≤–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %.2f"), imt)
	case imt >= 18.5 && imt <= 25:
		return fmt.Sprintf(success("–í—ã –≤ –Ω–æ—Ä–º–µ, –≤–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %.2f"), imt)
	case imt >= 25 && imt <= 30:
		return fmt.Sprintf(yellow("–£ –≤–∞—Å –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞, –≤–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %.2f"), imt)
	case imt >= 30 && imt <= 35:
		return fmt.Sprintf(yellow("–£ –≤–∞—Å 1-—è —Å—Ç–µ–ø–µ–Ω—å –æ–∂–∏—Ä–µ–Ω–∏—è, –≤–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %.2f"), imt)
	case imt >= 35 && imt <= 40:
		return fmt.Sprintf(red("–£ –≤–∞—Å 2-—è —Å—Ç–µ–ø–µ–Ω—å –æ–∂–∏—Ä–µ–Ω–∏—è, –≤–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %.2f"), imt)
	case imt >= 40 && imt <= 45:
		return fmt.Sprintf(red("–£ –≤–∞—Å 3-—è —Å—Ç–µ–ø–µ–Ω—å –æ–∂–∏—Ä–µ–Ω–∏—è, –≤–∞—à –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç %.2f"), imt)
	default:
		return fmt.Sprintf("–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞, –Ω–æ –≤–∞—à –ò–ú–¢ —Ä–∞–≤–µ–Ω %.2f ü§î", imt)
	}
}
